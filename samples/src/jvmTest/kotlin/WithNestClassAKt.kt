// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: WithNestClassA.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializewithNestClassA")
public inline fun withNestClassA(block: WithNestClassAKt.Dsl.() -> kotlin.Unit): WithNestClassAOuterClass.WithNestClassA =
  WithNestClassAKt.Dsl._create(WithNestClassAOuterClass.WithNestClassA.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `WithNestClassA`
 */
public object WithNestClassAKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: WithNestClassAOuterClass.WithNestClassA.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: WithNestClassAOuterClass.WithNestClassA.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): WithNestClassAOuterClass.WithNestClassA = _builder.build()

    /**
     * `.WithNestClassA.NestedClass a = 1;`
     */
    public var a: WithNestClassAOuterClass.WithNestClassA.NestedClass
      @JvmName("getA")
      get() = _builder.getA()
      @JvmName("setA")
      set(value) {
        _builder.setA(value)
      }
    /**
     * `.WithNestClassA.NestedClass a = 1;`
     */
    public fun clearA() {
      _builder.clearA()
    }
    /**
     * `.WithNestClassA.NestedClass a = 1;`
     * @return Whether the a field is set.
     */
    public fun hasA(): kotlin.Boolean {
      return _builder.hasA()
    }
  }
  @kotlin.jvm.JvmName("-initializenestedClass")
  public inline fun nestedClass(block: WithNestClassAKt.NestedClassKt.Dsl.() -> kotlin.Unit): WithNestClassAOuterClass.WithNestClassA.NestedClass =
    WithNestClassAKt.NestedClassKt.Dsl._create(WithNestClassAOuterClass.WithNestClassA.NestedClass.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `WithNestClassA.NestedClass`
   */
  public object NestedClassKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: WithNestClassAOuterClass.WithNestClassA.NestedClass.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: WithNestClassAOuterClass.WithNestClassA.NestedClass.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): WithNestClassAOuterClass.WithNestClassA.NestedClass = _builder.build()

      /**
       * `string nested = 1;`
       */
      public var nested: kotlin.String
        @JvmName("getNested")
        get() = _builder.getNested()
        @JvmName("setNested")
        set(value) {
          _builder.setNested(value)
        }
      /**
       * `string nested = 1;`
       */
      public fun clearNested() {
        _builder.clearNested()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun WithNestClassAOuterClass.WithNestClassA.copy(block: WithNestClassAKt.Dsl.() -> kotlin.Unit): WithNestClassAOuterClass.WithNestClassA =
  WithNestClassAKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun WithNestClassAOuterClass.WithNestClassA.NestedClass.copy(block: WithNestClassAKt.NestedClassKt.Dsl.() -> kotlin.Unit): WithNestClassAOuterClass.WithNestClassA.NestedClass =
  WithNestClassAKt.NestedClassKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val WithNestClassAOuterClass.WithNestClassAOrBuilder.aOrNull: WithNestClassAOuterClass.WithNestClassA.NestedClass?
  get() = if (hasA()) getA() else null

