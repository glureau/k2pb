// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: Vehicle.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializevehicle")
public inline fun vehicle(block: VehicleKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle =
  VehicleKt.Dsl._create(VehicleOuterClass.Vehicle.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `Vehicle`
 */
public object VehicleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: VehicleOuterClass.Vehicle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: VehicleOuterClass.Vehicle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): VehicleOuterClass.Vehicle = _builder.build()
  }
  @kotlin.jvm.JvmName("-initializebike")
  public inline fun bike(block: VehicleKt.BikeKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle.Bike =
    VehicleKt.BikeKt.Dsl._create(VehicleOuterClass.Vehicle.Bike.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `Vehicle.Bike`
   */
  public object BikeKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: VehicleOuterClass.Vehicle.Bike.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: VehicleOuterClass.Vehicle.Bike.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): VehicleOuterClass.Vehicle.Bike = _builder.build()

      /**
       * `string brand = 1;`
       */
      public var brand: kotlin.String
        @JvmName("getBrand")
        get() = _builder.getBrand()
        @JvmName("setBrand")
        set(value) {
          _builder.setBrand(value)
        }
      /**
       * `string brand = 1;`
       */
      public fun clearBrand() {
        _builder.clearBrand()
      }
    }
  }
  @kotlin.jvm.JvmName("-initializecar")
  public inline fun car(block: VehicleKt.CarKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle.Car =
    VehicleKt.CarKt.Dsl._create(VehicleOuterClass.Vehicle.Car.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `Vehicle.Car`
   */
  public object CarKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: VehicleOuterClass.Vehicle.Car.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: VehicleOuterClass.Vehicle.Car.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): VehicleOuterClass.Vehicle.Car = _builder.build()

      /**
       * `string brand = 1;`
       */
      public var brand: kotlin.String
        @JvmName("getBrand")
        get() = _builder.getBrand()
        @JvmName("setBrand")
        set(value) {
          _builder.setBrand(value)
        }
      /**
       * `string brand = 1;`
       */
      public fun clearBrand() {
        _builder.clearBrand()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun VehicleOuterClass.Vehicle.copy(block: VehicleKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle =
  VehicleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun VehicleOuterClass.Vehicle.Bike.copy(block: VehicleKt.BikeKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle.Bike =
  VehicleKt.BikeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun VehicleOuterClass.Vehicle.Car.copy(block: VehicleKt.CarKt.Dsl.() -> kotlin.Unit): VehicleOuterClass.Vehicle.Car =
  VehicleKt.CarKt.Dsl._create(this.toBuilder()).apply { block() }._build()

