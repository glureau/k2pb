// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: WithNestClassB.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializewithNestClassB")
public inline fun withNestClassB(block: WithNestClassBKt.Dsl.() -> kotlin.Unit): WithNestClassBOuterClass.WithNestClassB =
  WithNestClassBKt.Dsl._create(WithNestClassBOuterClass.WithNestClassB.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `WithNestClassB`
 */
public object WithNestClassBKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: WithNestClassBOuterClass.WithNestClassB.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: WithNestClassBOuterClass.WithNestClassB.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): WithNestClassBOuterClass.WithNestClassB = _builder.build()

    /**
     * `.WithNestClassB.NestedClass b = 1;`
     */
    public var b: WithNestClassBOuterClass.WithNestClassB.NestedClass
      @JvmName("getB")
      get() = _builder.getB()
      @JvmName("setB")
      set(value) {
        _builder.setB(value)
      }
    /**
     * `.WithNestClassB.NestedClass b = 1;`
     */
    public fun clearB() {
      _builder.clearB()
    }
    /**
     * `.WithNestClassB.NestedClass b = 1;`
     * @return Whether the b field is set.
     */
    public fun hasB(): kotlin.Boolean {
      return _builder.hasB()
    }
  }
  @kotlin.jvm.JvmName("-initializenestedClass")
  public inline fun nestedClass(block: WithNestClassBKt.NestedClassKt.Dsl.() -> kotlin.Unit): WithNestClassBOuterClass.WithNestClassB.NestedClass =
    WithNestClassBKt.NestedClassKt.Dsl._create(WithNestClassBOuterClass.WithNestClassB.NestedClass.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `WithNestClassB.NestedClass`
   */
  public object NestedClassKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: WithNestClassBOuterClass.WithNestClassB.NestedClass.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: WithNestClassBOuterClass.WithNestClassB.NestedClass.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): WithNestClassBOuterClass.WithNestClassB.NestedClass = _builder.build()

      /**
       * `.WithNestClassB.NestedClass.NestedEnum nestedEnum = 1;`
       */
      public var nestedEnum: WithNestClassBOuterClass.WithNestClassB.NestedClass.NestedEnum
        @JvmName("getNestedEnum")
        get() = _builder.getNestedEnum()
        @JvmName("setNestedEnum")
        set(value) {
          _builder.setNestedEnum(value)
        }
      public var nestedEnumValue: kotlin.Int
        @JvmName("getNestedEnumValue")
        get() = _builder.getNestedEnumValue()
        @JvmName("setNestedEnumValue")
        set(value) {
          _builder.setNestedEnumValue(value)
        }
      /**
       * `.WithNestClassB.NestedClass.NestedEnum nestedEnum = 1;`
       */
      public fun clearNestedEnum() {
        _builder.clearNestedEnum()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun WithNestClassBOuterClass.WithNestClassB.copy(block: WithNestClassBKt.Dsl.() -> kotlin.Unit): WithNestClassBOuterClass.WithNestClassB =
  WithNestClassBKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun WithNestClassBOuterClass.WithNestClassB.NestedClass.copy(block: WithNestClassBKt.NestedClassKt.Dsl.() -> kotlin.Unit): WithNestClassBOuterClass.WithNestClassB.NestedClass =
  WithNestClassBKt.NestedClassKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val WithNestClassBOuterClass.WithNestClassBOrBuilder.bOrNull: WithNestClassBOuterClass.WithNestClassB.NestedClass?
  get() = if (hasB()) getB() else null

