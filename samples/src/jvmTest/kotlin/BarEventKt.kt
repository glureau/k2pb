// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: BarEvent.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializebarEvent")
public inline fun barEvent(block: BarEventKt.Dsl.() -> kotlin.Unit): BarEventOuterClass.BarEvent =
  BarEventKt.Dsl._create(BarEventOuterClass.BarEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `BarEvent`
 */
public object BarEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: BarEventOuterClass.BarEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: BarEventOuterClass.BarEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): BarEventOuterClass.BarEvent = _builder.build()

    /**
     * `.CommonClass common = 1;`
     */
    public var common: CommonClassOuterClass.CommonClass
      @JvmName("getCommon")
      get() = _builder.getCommon()
      @JvmName("setCommon")
      set(value) {
        _builder.setCommon(value)
      }
    /**
     * `.CommonClass common = 1;`
     */
    public fun clearCommon() {
      _builder.clearCommon()
    }
    /**
     * `.CommonClass common = 1;`
     * @return Whether the common field is set.
     */
    public fun hasCommon(): kotlin.Boolean {
      return _builder.hasCommon()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun BarEventOuterClass.BarEvent.copy(block: BarEventKt.Dsl.() -> kotlin.Unit): BarEventOuterClass.BarEvent =
  BarEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val BarEventOuterClass.BarEventOrBuilder.commonOrNull: CommonClassOuterClass.CommonClass?
  get() = if (hasCommon()) getCommon() else null

