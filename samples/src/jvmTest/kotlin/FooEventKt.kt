// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: FooEvent.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializefooEvent")
public inline fun fooEvent(block: FooEventKt.Dsl.() -> kotlin.Unit): FooEventOuterClass.FooEvent =
  FooEventKt.Dsl._create(FooEventOuterClass.FooEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `FooEvent`
 */
public object FooEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: FooEventOuterClass.FooEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: FooEventOuterClass.FooEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): FooEventOuterClass.FooEvent = _builder.build()

    /**
     * `.CommonClass common = 1;`
     */
    public var common: CommonClassOuterClass.CommonClass
      @JvmName("getCommon")
      get() = _builder.getCommon()
      @JvmName("setCommon")
      set(value) {
        _builder.setCommon(value)
      }
    /**
     * `.CommonClass common = 1;`
     */
    public fun clearCommon() {
      _builder.clearCommon()
    }
    /**
     * `.CommonClass common = 1;`
     * @return Whether the common field is set.
     */
    public fun hasCommon(): kotlin.Boolean {
      return _builder.hasCommon()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun FooEventOuterClass.FooEvent.copy(block: FooEventKt.Dsl.() -> kotlin.Unit): FooEventOuterClass.FooEvent =
  FooEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val FooEventOuterClass.FooEventOrBuilder.commonOrNull: CommonClassOuterClass.CommonClass?
  get() = if (hasCommon()) getCommon() else null

