// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: MultiModule.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializemultiModule")
public inline fun multiModule(block: MultiModuleKt.Dsl.() -> kotlin.Unit): MultiModuleOuterClass.MultiModule =
  MultiModuleKt.Dsl._create(MultiModuleOuterClass.MultiModule.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `MultiModule`
 */
public object MultiModuleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: MultiModuleOuterClass.MultiModule.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: MultiModuleOuterClass.MultiModule.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): MultiModuleOuterClass.MultiModule = _builder.build()

    /**
     * `string todo = 1;`
     */
    public var todo: kotlin.String
      @JvmName("getTodo")
      get() = _builder.getTodo()
      @JvmName("setTodo")
      set(value) {
        _builder.setTodo(value)
      }
    /**
     * `string todo = 1;`
     */
    public fun clearTodo() {
      _builder.clearTodo()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun MultiModuleOuterClass.MultiModule.copy(block: MultiModuleKt.Dsl.() -> kotlin.Unit): MultiModuleOuterClass.MultiModule =
  MultiModuleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

