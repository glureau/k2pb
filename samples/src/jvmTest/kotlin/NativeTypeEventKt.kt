// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: NativeTypeEvent.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializenativeTypeEvent")
public inline fun nativeTypeEvent(block: NativeTypeEventKt.Dsl.() -> kotlin.Unit): NativeTypeEventOuterClass.NativeTypeEvent =
  NativeTypeEventKt.Dsl._create(NativeTypeEventOuterClass.NativeTypeEvent.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `NativeTypeEvent`
 */
public object NativeTypeEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: NativeTypeEventOuterClass.NativeTypeEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: NativeTypeEventOuterClass.NativeTypeEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): NativeTypeEventOuterClass.NativeTypeEvent = _builder.build()

    /**
     * `int32 integer = 1;`
     */
    public var integer: kotlin.Int
      @JvmName("getInteger")
      get() = _builder.getInteger()
      @JvmName("setInteger")
      set(value) {
        _builder.setInteger(value)
      }
    /**
     * `int32 integer = 1;`
     */
    public fun clearInteger() {
      _builder.clearInteger()
    }

    /**
     * `int64 long = 2;`
     */
    public var long: kotlin.Long
      @JvmName("getLong")
      get() = _builder.getLong()
      @JvmName("setLong")
      set(value) {
        _builder.setLong(value)
      }
    /**
     * `int64 long = 2;`
     */
    public fun clearLong() {
      _builder.clearLong()
    }

    /**
     * `float float = 3;`
     */
    public var float: kotlin.Float
      @JvmName("getFloat")
      get() = _builder.getFloat()
      @JvmName("setFloat")
      set(value) {
        _builder.setFloat(value)
      }
    /**
     * `float float = 3;`
     */
    public fun clearFloat() {
      _builder.clearFloat()
    }

    /**
     * `double double = 4;`
     */
    public var double: kotlin.Double
      @JvmName("getDouble")
      get() = _builder.getDouble()
      @JvmName("setDouble")
      set(value) {
        _builder.setDouble(value)
      }
    /**
     * `double double = 4;`
     */
    public fun clearDouble() {
      _builder.clearDouble()
    }

    /**
     * `string string = 5;`
     */
    public var string: kotlin.String
      @JvmName("getString")
      get() = _builder.getString()
      @JvmName("setString")
      set(value) {
        _builder.setString(value)
      }
    /**
     * `string string = 5;`
     */
    public fun clearString() {
      _builder.clearString()
    }

    /**
     * `int32 short = 6;`
     */
    public var short: kotlin.Int
      @JvmName("getShort")
      get() = _builder.getShort()
      @JvmName("setShort")
      set(value) {
        _builder.setShort(value)
      }
    /**
     * `int32 short = 6;`
     */
    public fun clearShort() {
      _builder.clearShort()
    }

    /**
     * `int32 char = 7;`
     */
    public var char: kotlin.Int
      @JvmName("getChar")
      get() = _builder.getChar()
      @JvmName("setChar")
      set(value) {
        _builder.setChar(value)
      }
    /**
     * `int32 char = 7;`
     */
    public fun clearChar() {
      _builder.clearChar()
    }

    /**
     * `bool boolean = 8;`
     */
    public var boolean: kotlin.Boolean
      @JvmName("getBoolean")
      get() = _builder.getBoolean()
      @JvmName("setBoolean")
      set(value) {
        _builder.setBoolean(value)
      }
    /**
     * `bool boolean = 8;`
     */
    public fun clearBoolean() {
      _builder.clearBoolean()
    }

    /**
     * `int32 byte = 9;`
     */
    public var byte: kotlin.Int
      @JvmName("getByte")
      get() = _builder.getByte()
      @JvmName("setByte")
      set(value) {
        _builder.setByte(value)
      }
    /**
     * `int32 byte = 9;`
     */
    public fun clearByte() {
      _builder.clearByte()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun NativeTypeEventOuterClass.NativeTypeEvent.copy(block: NativeTypeEventKt.Dsl.() -> kotlin.Unit): NativeTypeEventOuterClass.NativeTypeEvent =
  NativeTypeEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

