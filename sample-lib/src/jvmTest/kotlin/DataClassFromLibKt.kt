// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: DataClassFromLib.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializedataClassFromLib")
public inline fun dataClassFromLib(block: DataClassFromLibKt.Dsl.() -> kotlin.Unit): DataClassFromLibOuterClass.DataClassFromLib =
  DataClassFromLibKt.Dsl._create(DataClassFromLibOuterClass.DataClassFromLib.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `DataClassFromLib`
 */
public object DataClassFromLibKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: DataClassFromLibOuterClass.DataClassFromLib.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: DataClassFromLibOuterClass.DataClassFromLib.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): DataClassFromLibOuterClass.DataClassFromLib = _builder.build()

    /**
     * `int32 myInt = 1;`
     */
    public var myInt: kotlin.Int
      @JvmName("getMyInt")
      get() = _builder.getMyInt()
      @JvmName("setMyInt")
      set(value) {
        _builder.setMyInt(value)
      }
    /**
     * `int32 myInt = 1;`
     */
    public fun clearMyInt() {
      _builder.clearMyInt()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun DataClassFromLibOuterClass.DataClassFromLib.copy(block: DataClassFromLibKt.Dsl.() -> kotlin.Unit): DataClassFromLibOuterClass.DataClassFromLib =
  DataClassFromLibKt.Dsl._create(this.toBuilder()).apply { block() }._build()

